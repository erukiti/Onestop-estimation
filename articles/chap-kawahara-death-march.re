= コンシューマーゲームの見積もり（いにしえの記憶より）

//flushright{
さっぴー川原 ＠sapi_kawahara
//}

今もゲームソフトの発売が遅れることがありますが、昔のコンシューマーゲーム@<fn>{consumer}での開発では遅れることが当たり前です、そしていつしか@<b>{遅れることが常態化するゲーム開発の世界}と呼ばれるようになりました。
原因はさまざまで本稿はコンシューマゲームの見積もりに関してピックアップして書いていきたいと思います。
今回、寄稿することにより、構造的に似ているスタートアップ企業と照らし合わせて、問題の早期発見、早期改善に注力できるように、アンチパターンとして、この話を読んでいただけたら幸いです。

//footnote[consumer][コンシューマーゲーム この寄稿では、ファミコンなど8ビットや16ビットコンシューマーゲーム機器で動作するアプリケーションとする。]

== 遅れが常態化する原因

自分が経験したのは次の4つのケースです。

  1. 進まない見積もり。
  2. 途中で大幅に変更される見積もり。
  3. リセットされる見積もり。
  4. 有名人を企画者にしたときの見積もり。

== 進まない見積もり
企画者が企画する物を出さないので@<b>{見積もりが作成できないケース}です。
ゲーム製作において世界観を決定付けるのにプロット@<fn>{プロット}を作成することが重要です。このプロットを作ることによりゲームストーリーの他にデザインや音楽やプログラミングにも関わるゲームシステム@<fn>{ゲームシステム}がここで決定されます。

このプロットの作成が遅れることで全体の進捗に影響がでます、各パーツの作業が進まずゲーム製作が遅れていきます、それよりも深刻なことはプロットが作られていないことがあります、プロットについて@<b>{企画者がプロットというのを理解していないまま}ストーリー@<fn>{ストーリー}を作成していることが非常に多いです。プロットとストーリーは似て非なるものです。（違いについては次のコラムにて記載する）

ゲームの規模が大きくなれば大きくなるほど、企画者がストーリーを記載する量が増えていきますし作業時間も増大します、そのためゲームの全体像が見えるものができ上がってきません、ゲームシステムを作るためにはゲームの全体像が必要なのです、それがいつまで経っても出てこないのです。
ある程度作成されたストーリーからゲームシステムを作ることは可能ですが、不確定要素はストーリーの後半にあることが多いので、エンジニアとしては全体像としての@<b>{全ての要素が記載されたプロットを望みます}。

企画者はプロットを理解せずストーリーを淡々と作成しゲームの全体像が見えないまま最終的な見積もりが作成できずに、そしていつしか発売日だけが決定しデスマーチがはじまります。

//footnote[プロット][プロットとは、ゲームを作るときに最初に作成されるストーリーの基本設計です。詳細については次のコラムにて記載する。]
//footnote[ゲームシステム][ここでいうゲームシステムとは、ゲーム全体に関わる要素、ロールプレイングゲームならドラクエ式なのかFF式なのか、戦闘方式はコマンド式なのかリアルタイム式なのか、それらをまとめたものです。]
//footnote[ストーリー][ストーリーとは、ゲームにおける全ての内容です、プロットから肉付けされたものがストーリーとなります。詳細については次のコラムにて記載する。]

===[column] プロットとストーリーの関係性について

//image[kawahara_Flowchart1][プロットの説明][scale=0.75]{
//}

プロットはゲームの骨格になるものです、ゲームの基本設計です。@<br>{}
まずプロットを作成し、そこからストーリーを肉付けしていきます。
プロットの要素は、スタートとエンドがあり、その間にイベントがあります、その間をつなぐものが、分岐要素と合流要素と繰返し要素（複数イベントをまたぐ繰返し要素を含む）になります。@<br>{}
作られたプロットを元に、プログラムを実装していきます。

これに似たものに「あらすじ」がありますが、あらすじは読者のためにストーリーを要約されたものです。

//image[kawahara_Flowchart2][ストーリーの説明][scale=0.75]{
//}

ストーリーはプロットでは書かれていないイベントの詳細やサブイベントを追加したゲーム全体の内容です、ゲームの詳細設計です。@<br>{}
ストーリーを作成することにより、ゲーム全体の世界観や最終的な工数が見えてきます、ストーリーを作成しているときには、プログラムの実装に入っており、企画者にフィードバックすることもあります。

プログラムの作成に入っているということは、ここで大きな変更はできないことを意味します。ストーリー作成中にプロットとは違うことをすること、たえばイベント間のつながり変更することは、プログラムの変更を意味し見積もりが大幅に変わります、それと同時に工数が増えます。

===[/column]


== 途中で大幅に変更される見積もり
ゲームが動いているのを見て、企画者が新たな企画を考えて見積もりが変わります、このケースは多く見受けられ遅れる原因の大半がこちらになります。
プロットから大きく外れないなど少しの修正ならば見積もりが変わるほどではありませんが、大抵はプロットから大きく外れた要求をしてくるため遅れにつながります。

== リセットされる見積もり
途中で大幅に変更されるケースで、一番大きいのはゲームができてから企画者の一存で最初からやり直したケースがあります。
ゲーム製作が完了していても発売するまでは安心してはいけません、株主を含む立場の強い企画者は積み上げてきた物をバベルの塔を破壊@<fn>{メテオフォール型開発}するがのごとく、@<b>{見積もりを含む全てのシステムをすべてを無にします}。

//footnote[メテオフォール型開発][ゲーム製作時代はバベルの塔を破壊されたと言ってましたが、最近では「メテオフォール型開発」@<href>{http://eiki.hatenablog.jp/entry/meteo_fall} という言葉が生まれました。]

== 有名人を企画者にしたときの見積もり
有名人が書いた紙一枚のプロットだけで見積もりを作成するケースなどが有ります、そこからゲーム製作して作ったものに対して納得する有名人であれば楽なケースとなります。

このケースは注意が必要です、事前に有名人とのコミュニケーションをとっている場合であってもゲーム製作側と有名人との齟齬が発生しています。
この齟齬が大きくなればなるほど、見積もり変更も大きくなります、こちらもバベルの塔を破壊が発生することもあり、とても注意が必要です。


== 遅れを取り返す行動
遅れを取り戻す行動としては、企画者とエンジニアでは次の行動をしておりました。

 * 企画者の行動
     ** 見積もりを守る行動
        *** メイン企画者を無視するサブ企画者
        *** できあがりは違うが、次作でと考える企画者
        *** エンジニアのいうことを聞く企画者
     ** 見積もりを守らない行動
        *** できる物が良くなるから売れる、だから見積もりし直してもよいという企画者
        *** 新機種だから売れる、だから見積もりし直してもよいという企画者
 * エンジニアの行動
     ** 遅れを取り戻すエンジニア
        *** 企画の叩きを作るエンジニア
        *** 空気を読むエンジニア
        *** 複数のパターンを作るエンジニア
        *** 会社に泊まり込むエンジニア
        *** 会社を辞めるエンジニア

== 企画者の行動、見積もりを守る行動

=== メイン企画者とサブ企画者

メイン企画者とサブ企画者のように、役割分担ができているとうまくいくケースがあります。
たえばメイン企画者がストーリー作成に走ってしまったケースでは、補佐する形でサブ企画者がプロットを含めたゲームシステムの構築をすると役割分担うまくできます、このような@<b>{複数人の企画者を設定する}のはゲームシステムを作るうえでとても重要であり効果があります。

=== できあがりは違うが、次作でと考える企画者

割り切りができる企画者であれば、できあがりが納得できないケースであっても次作で実現すればよいと考えます、これができるようになれば次作のクオリティは良くなります、@<b>{エンジニアも次作のモチベーションがあがります}。企画者は葛藤をしますが割り切りが大事です。

=== エンジニアのいうことを聞く企画者
できあがりが納得できないケースで、企画者のことを全部聞いていたら永久に終わりません。
スケジュール優先であり企画者のいうことよりも、それは仕様でありと決めて見積もりが変更されないようにします、@<b>{スケジュールを守らない企画者はエンジニアのいうことを聞くのが大事}です。

== 企画者の行動、見積もりを守らない行動

=== できる物が良くなるから、だから見積もりし直してもよいという企画者

こちらはスケジュールの遅れについて修正が効かないケースです。
企画者は自分の作ったものに絶対の自信が有ります、だからこそ作り直すや修正を求める企画者も居ます。
これは受け入れるしかないです、まずは受け入れることが大事です。
売れる売れないに関しては発売したあとに決まるのであり、@<b>{納得しなくても企画者のいうことを信じて足並み揃えて進むのがよい}です。

=== 新機種だから売れる、だから見積もりし直してもよいという企画者

こちらもスケジュールの遅れについて修正が効かないケースです。
ゲーム製作途中で新機種の発表があり製作しているゲームを新機種に切り替えることがあります、ターゲットマシンと新機種でアーキテクチャーが似ていても完全に作り直しは避けられません。
このケースでは@<b>{素直に再見積もりしてゼロから再スタートがよい}です。

== 遅れを取り返すエンジニアの行動

=== 企画の叩きを作るエンジニア

企画が無ければ別の人が作ればよい、その上で見積もりも作成すればよいケースです。
とても多いケースです、リードエンジニアという立場になると専業にしている人もいるほどです、利点としてはエンジニアが安心して作業できる点があります。
企画者との折衝はリードエンジニアがしているので@<b>{余計な気遣いも無く大きな仕様変更も発生しにくい}です。

=== 空気を読むエンジニア

普段の会話から企画者の意図を読み取ってゲームを作ればよいケースです。
意図があっているなら効率が高いのですが、あわないまま製作をすると作り直しになるし@<b>{エビデンスが残っていないので言った言わない論争に発展することが多いです}、お勧めしない方法です。

=== 複数のパターンを作るエンジニア

企画者の感性でゲーム内容が変わるので、あらかじめ想定される内容を複数作成すればよいケースです。
これを実現するのは難易度が高いですがABテストのような少しの修正で見え方が変わるのであれば行なって損は有りません。
@<b>{企画者も納得しやすく効果が高いです}、エビデンスも残るのでお勧めの対応方法です。

=== 会社に泊まり込むエンジニア

時間が無いなら２４時間働けばよいケースです。
見積もりより大幅に遅れたケースでは、当時は会社に泊まり込み土日も全て仕事をすることで遅れを取り戻していました。
@<b>{今の時代は行なうべきやり方ではありません。}

=== 会社を辞めるエンジニア

無理な見積もりで、どう考えても無理なら撤退することもよいケースです、@<b>{身体を壊してまで仕事をする必要はないです。}
無理ならば止めることも選択肢です、会社が受け入れないときは退社も考えましょう。

== まとめ

ゲーム制作の現場は曖昧な見積もりが多いです。
これらのケースは今の時代もあるかもしれませんしゲーム製作じゃない現場やスタートアップ企業でもあるかもしれません。
@<b>{このアンチパターンを覚えておけば事前に回避できるかもしれません}、多くの方が経験しないことを祈ります。
