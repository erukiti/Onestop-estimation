= 見積もる前に作業を終わらせろ

//flushright{
＠setoazusa
//}

見積もりには「この納期でこの仕様の物品を納品します」ことを確約するコミットメントとしての見積もりと、
一定の期間の作業にあたって、どのマイルストーンでどの中間成果物を用意すれば、作業の目的を達成できるかという、
工程表としての見積もりの両者があります。この節で扱う見積もりは後者です。

== 技術調査の見積もりの難しさ

筆者が行う業務の一つとして、顧客が新しい技術スタックを採用するにあたっての技術調査や、
現場での改善を進めるにあたってのヒアリングと、改善方法の提示というものがあります。
ざっくりまとめれば、技術コンサルというやつです。

なぜ、見積もりが可能であるかと言えば、これから取りかかろうとする作業に何らかの予測可能な
要素があるからです。類似した内容の案件を行ったことがある、使おうとしている技術スタックの経験が
あるなどですね。

ですが、そのような新しい技術要素に取り組む時に、そのスケジュールが予測可能であるなら、
それはもう実装のフェーズに入ってしまえばよいのであり、そもそも技術調査というものの必要性がないです。

技術調査であるからには、技術的に高度な内容を頼むわけですから、比較的単価が高い、高いスキルなエンジニアを
アサインすることになります。そのような単価が高いエンジニアを、直接のユーザー向けの機能開発に関わらない
内容にフルアサインするだけの予算が出せる顧客は少ないです。

顧客側の都合はともかくとして、現状そのような、案件の立ち上げ時等の技術検証の案件は、需要に対して
技術者側の供給が追いついていないです。そのような高いスキルのエンジニアというのは半年とか一年で
育成できるわけでないので、大体一人のエンジニアが複数案件を担当することになります。

基本的にコンサルティングは、プリンシパルな高単価のコンサルタントの下にジュニアクラスの比較的低単価な
コンサルタントがぶらさがってチームを形成するのですが、技術調査、特に筆者の主とする自動化や継続的デリバリーなどの領域は、
細かい部分まで高スキルのエンジニアが実装を担当しなければ成果物の完成には至らないので@<fn>{softwareengineer}、メインで担当する技術者が最後まで面倒をみることになります。

//footnote[softwareengineer][ソフトウェアエンジニアの方々はわかりますよね？]

また、それぞれの案件で入ってくる色々な打合せは、その案件にフルコミットしている
メンバーにはそれほどの負荷ではないのですが、複数案件を担当している人間にとっては、
ボディーブローのように作業時間を削っていきます。

== 作業の確実性への「見積もり」

冒頭で見積もりをコミットメントとしての見積もりと工程表としての見積もりの二種類に分類しましたが、
、作業の結果として提供するサービスレベルが契約で定められている場合は、短時間で終わる作業であっても
確実に終了させるためにそれなりの準備が必要な場合があります。サーバーやネットワークの設定作業が
あてはまります。

作業するにあたって公式ドキュメント等を読み込んで情報の整理、作業のリハーサルの準備と実施、リハーサルで
起きた問題の整理と対応などなど。2時間とか短ければ30分の作業の準備に1週間かかるのはありふれたことです。
これも見積もりと言えるでしょう。

この見積もりはコミットメントや工数のために見積もっているのではなく、
作業の確実性のために見積もっているのですが、ノウハウの蓄積ない状態では、単に作業の準備に時間が
かかっているというように外部からはみられてしまいます。

== ソロプレイの集合体に置ける見積もりの意味

技術コンサルのように、小さな単位の案件が並行で動くときに工程をチーム単位で統括して管理しても意味がないです。
基本各自が自分の作業を見積もり、自分で管理すると言うことになります。

全員スタンドプレーで好き勝手やっているんだけど全体として見るとなぜか統制が取れているというマネジメントは、傍目にはかっこいいかもしれないが、たやすく成立するものではないです。「反復型」の名の下に最終成果物のデザインとクリティカルパスのマネジメントを放棄するのは避けるべきです。

新型コロナウイルス感染症に端を発するリモートワークのひろがりにより、成果主義というワードが注目されてきていますが、成果主義というのは、アウトプットとしての成果物を出すことに指向して、どのように成果物を生み出すかをマネジメントすることであって、結果に対する賞罰の話ではないです。

== 見積もる前に作業を終わらせろ

自分が手を動かさないと仕事は終わらない、スケジュール通りに物事が進むことはない、常に案件は複数動く、成果物のデザインとクリティカルパスのハンドリングは自分でやらなければならない。ただしその筋道は自分で考える。

でも自分は原稿の執筆の時間もあるし、家事もあるから、残業はしたくないんです。

ではどうするかということなのですが、

「依頼が来たときに仕事が終わっていればいい」のです。

前例がないのなら予め前例を作っておけばいいのであり、タスクの掛け持ちが前提となるなら、
作業の依頼が来る前に予め成果物を用意しておけばよいのです。

案件のヒアリングをした時に、技術要素に関するレポートとかは用意してあって、
それをフィッティングして納品したら終了というのが理想ですね。

そのような、検証済みの手持ちの札をどれだけ増やせていけるか、というのが、技術コンサルタントとしてやっていく上での生命線になります。

手持ちの札をどのように増やすかには、日常からの案件に直接関係しない要素への調査とアウトプットが必要ですが、
その時に、実際の案件に適用できるような明確なアウトプットを伴う素振りが必要です。

== 技術同人誌を書こう

日常の案件にそのまま適用できるような高いレベルのアウトプットをどうやれば出せればいいのですが、
日々忙しいわけですし、時間があいたらあいたではじめるのはTwitterとかです。
本業とは別の枠組みで、強制的に締め切りを設定する仕組みが必要ですね。

ここでおすすめなのが技術同人誌です。技術同人誌を一冊書くために必要な調査と、それを書籍として
必要なクオリティーにまとめあげるために必要な作業は、技術コンサルタントの案件前の素振りとして、
非常に向いています。

このような、パブリックな場所にアウトプットを出していくことは、ソフトウェアエンジニアとして、
手持ちに将来の案件に備えた手持ち在庫を積み上げていくことにつながり、手持ち在庫が
豊かになることが、日々の仕事と生活のゆとりへと結びついていきます。
その割には技術書典等のイベントの入稿前が大体修羅場になるので、ゆとりにむすびついてない気もするのですが…

